import numpy as np
from math import exp
import time
# Define constants
NI = 3
NH1 = 16
NH2 = 8
NH3 = 4
NO = 1

SMALL1 = 1.0e-20
OMEGA = 7.26E-3
K_F0 = 0.0257
K_S0 = 0.29
min_val = 3.5388
max_val = 8.5552

# Define weights and biases
IW = np.array([[-1.5582248, -2.46757, -2.5418835, -2.985875, -2.044306, -3.165086, 2.6962786, 1.570628, 1.9805754, -1.4589518, 2.0126028, -1.7743504, -2.7962937, -1.0229516, -1.4725527, 2.3409698],
               [-0.13974571, 0.51182044, 0.41524053, -0.12704508, 0.24660031, 0.3688965, 2.9667315, -0.4228308, 0.56329006, -0.18212788, 0.3581895, -0.29713887, -0.4854258, -0.15655787, 0.32499683, 0.4348078],
               [-0.23623218, -0.04252426, -0.01037833, 0.04741014, -0.17991374, 0.03735462, 3.6345057, -0.5878261, 0.01314784, -0.00473932, -0.00984425, -0.2056783, 0.04235772, 0.23454268, 0.22414905, -0.008082]])

LW1 = np.array([[-0.17643413, -0.16708142, 0.7316076, -0.39915386, 0.2507567, 1.1759286, -0.0453648, 0.35969353],
                [-1.1787112, -0.0121934, 1.9242591, 0.27107814, 0.35992295, 1.4285518, 0.9718213, 0.51650006],
                [-1.0319364, -0.48074108, 1.9107041, 0.54813445, 0.17543669, 1.977379, 0.80494344, 0.7292979],
                [-1.0926042, 0.38373625, 2.1232722, 0.9642708, 1.2624867, 2.2151575, 1.9878637, 1.6556569],
                [-0.817155, -0.66745925, 1.446418, -0.1819442, 0.6929233, 1.5583578, 0.7462236, 0.3803154],
                [-1.6753552, 0.49411744, 2.3781536, 0.30239657, 1.2593513, 2.4047446, 1.6460968, 1.5779178],
                [0.52430665, -0.16800517, -0.02150144, 0.13919489, -0.14249048, -0.639731, -0.41965953, -0.30281848],
                [1.3662368, -2.1651208, -0.970216, -2.2451012, -2.1107235, -1.023439, -1.3950323, -1.1804068],
                [0.9552201, -0.01093979, -1.2891446, -0.7408298, -0.6260313, -1.2849764, -0.34518987, -1.1082073],
                [-0.28913322, -0.10090705, 0.40611464, 0.3726159, 0.38884154, 0.22048377, 0.3628238, 0.62935925],
                [1.3922824, -0.75740224, -1.2817389, -0.9355653, -1.211567, -1.3316804, -1.6959969, -1.6126449],
                [-0.3533375, -0.76827884, 1.4328158, 0.23756766, 0.34680355, 1.1051484, 0.5223418, 0.21891086],
                [-1.4053439, 0.05773427, 2.2446015, 0.7579974, 1.3822346, 1.6996334, 1.8437092, 1.3650298],
                [0.12356897, 0.70231944, -0.04865283, 0.5141958, 0.35872146, 0.27239007, 0.4230249, 0.6060127],
                [-1.0133965, 0.8644376, 0.34809214, 0.6006063, 0.25278986, 0.6591709, 0.15335421, 0.6892508],
                [0.70033145, -0.7935694, -1.2479447, -0.8472703, -0.9908482, -0.97157496, -1.084057, -0.96169424]])

LW2 = np.array([[-0.680543, 1.0168723, -0.8086024, -1.6617581],
                [0.6047254, -0.7970622, 0.4033698, 0.38276565],
                [1.0327668, -0.85638654, 1.409003, 1.5893966],
                [1.0442806, -1.5983015, 0.12265874, 0.7121496],
                [1.6181079, -1.54353, 1.4915853, 0.78210306],
                [1.6190776, -1.4089658, 1.8087802, 2.3457117],
                [0.8491482, -0.4604674, 0.678038, 1.4653037],
                [0.8078247, -0.7932675, 0.94955504, 1.0001469]])

LW3 = np.array([[2.7606323],
                [-0.9098802],
                [1.3132463],
                [4.1591334]])

b1 = np.array([0.11619934, -0.01896433, 0.02876897, -0.30813247, -0.07081481, -0.1902895, 2.8246737, -0.32329974, 0.29472476, -0.38054034, 0.66677505, 0.11882079, -0.20373042, -0.4775792, -0.19401744, 0.10897144])
b21 = np.array([0.20924482, -0.22193986, -0.28432202, -0.19389208, -0.24605376, -0.18742928, -0.30726972, -0.3503536])
b22 = np.array([-0.24323612, -0.18952131, -0.24817905, -0.34395927])
b23 = np.array([2.1476314])

def sigmoid(x):
    return 1.0 / (1.0 + np.exp(-x))

def NN(input):
    # Calculate hidden layer 1
    hidden1 = sigmoid(np.dot(input, IW) + b1)

    # Calculate hidden layer 2
    hidden2 = sigmoid(np.dot(hidden1, LW1) + b21)

    # Calculate hidden layer 3
    hidden3 = sigmoid(np.dot(hidden2, LW2) + b22)

    # Calculate output layer
    output = np.dot(hidden3, LW3) + b23

    return output

d_solid = 0.000348
k_gas = 0.02
vel = 0.22
Pr = 0.886265
Re = 10.2936
eg=0.744461
start_time = time.time()  # Start time calculation


input_data = np.array([eg, Pr, Re])

Nu = NN(input_data)

h = Nu * k_gas / d_solid
    
print(h)

end_time = time.time()
print("Time for calculation:", end_time - start_time, "seconds")
